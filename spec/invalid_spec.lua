local utf8validator = require("utf8validator")

-- all tests below are adapted from Markus Kuhn' utf8_invalid.txt

--Markus Kuhn <http://www.cl.cam.ac.uk/~mgk25/> - 2003-02-19
--License: https://www.cl.cam.ac.uk/~mgk25/short-license.html

describe("valid test cases", function()
    it("1 Some correct UTF-8 text", function()
        assert.truthy(utf8validator("Œ∫·ΩπœÉŒºŒµ"))
    end)

    it("2.1 First possible sequence of a certain length", function()
        assert.truthy(utf8validator("\x00"))
        assert.truthy(utf8validator("\xC2\x80"))
        assert.truthy(utf8validator("‡†Ä"))
        assert.truthy(utf8validator("êÄÄ"))
        -- 5 and 6 byte are _not_ valid utf-8
    end)

    it("2.1 Last possible sequence of a certain length", function()
        assert.truthy(utf8validator("\x7F"))
        assert.truthy(utf8validator("ﬂø"))
        assert.truthy(utf8validator("\xEF\xBF\xBF"))
        assert.truthy(utf8validator("\xF4\x8F\xBF\xBF"))
        -- 5 and 6 byte are _not_ valid utf-8
    end)
end)

describe("invalid utf8 should fail", function()
    it("3.1 Unexpected continuation bytes", function()
        assert.falsy(utf8validator("\x80"))
        assert.falsy(utf8validator("\xBF"))
        assert.falsy(utf8validator("\x80\xBF"))
        assert.falsy(utf8validator("\x80\xBF\x80"))
        assert.falsy(utf8validator("\x80\xBF\x80\xBF"))
        assert.falsy(utf8validator("\x80\xBF\x80\xBF\x80"))
        assert.falsy(utf8validator("\x80\xBF\x80\xBF\x80\xBF"))
        
        assert.falsy(utf8validator("\x80"))
        assert.falsy(utf8validator("\x81"))
        assert.falsy(utf8validator("\x82"))
        assert.falsy(utf8validator("\x83"))
        assert.falsy(utf8validator("\x84"))
        assert.falsy(utf8validator("\x85"))
        assert.falsy(utf8validator("\x86"))
        assert.falsy(utf8validator("\x87"))
        assert.falsy(utf8validator("\x88"))
        assert.falsy(utf8validator("\x89"))
        assert.falsy(utf8validator("\x8A"))
        assert.falsy(utf8validator("\x8B"))
        assert.falsy(utf8validator("\x8C"))
        assert.falsy(utf8validator("\x8D"))
        assert.falsy(utf8validator("\x8E"))
        assert.falsy(utf8validator("\x8F"))
        assert.falsy(utf8validator("\x90"))
        assert.falsy(utf8validator("\x91"))
        assert.falsy(utf8validator("\x92"))
        assert.falsy(utf8validator("\x93"))
        assert.falsy(utf8validator("\x94"))
        assert.falsy(utf8validator("\x95"))
        assert.falsy(utf8validator("\x96"))
        assert.falsy(utf8validator("\x97"))
        assert.falsy(utf8validator("\x98"))
        assert.falsy(utf8validator("\x99"))
        assert.falsy(utf8validator("\x9A"))
        assert.falsy(utf8validator("\x9B"))
        assert.falsy(utf8validator("\x9C"))
        assert.falsy(utf8validator("\x9D"))
        assert.falsy(utf8validator("\x9E"))
        assert.falsy(utf8validator("\x9F"))
        assert.falsy(utf8validator("\xA0"))
        assert.falsy(utf8validator("\xA1"))
        assert.falsy(utf8validator("\xA2"))
        assert.falsy(utf8validator("\xA3"))
        assert.falsy(utf8validator("\xA4"))
        assert.falsy(utf8validator("\xA5"))
        assert.falsy(utf8validator("\xA6"))
        assert.falsy(utf8validator("\xA7"))
        assert.falsy(utf8validator("\xA8"))
        assert.falsy(utf8validator("\xA9"))
        assert.falsy(utf8validator("\xAA"))
        assert.falsy(utf8validator("\xAB"))
        assert.falsy(utf8validator("\xAC"))
        assert.falsy(utf8validator("\xAD"))
        assert.falsy(utf8validator("\xAE"))
        assert.falsy(utf8validator("\xAF"))
        assert.falsy(utf8validator("\xB0"))
        assert.falsy(utf8validator("\xB1"))
        assert.falsy(utf8validator("\xB2"))
        assert.falsy(utf8validator("\xB3"))
        assert.falsy(utf8validator("\xB4"))
        assert.falsy(utf8validator("\xB5"))
        assert.falsy(utf8validator("\xB6"))
        assert.falsy(utf8validator("\xB7"))
        assert.falsy(utf8validator("\xB8"))
        assert.falsy(utf8validator("\xB9"))
        assert.falsy(utf8validator("\xBA"))
        assert.falsy(utf8validator("\xBB"))
        assert.falsy(utf8validator("\xBC"))
        assert.falsy(utf8validator("\xBD"))
        assert.falsy(utf8validator("\xBE"))
        assert.falsy(utf8validator("\xBF"))
    end)

    describe("3.2 Lonely start characters", function()
        it("3.2.1  All 32 first bytes of 2-byte sequences", function()

            assert.falsy(utf8validator("\xC0"))
            assert.falsy(utf8validator("\xC0"))
            assert.falsy(utf8validator("\xC1"))
            assert.falsy(utf8validator("\xC2"))
            assert.falsy(utf8validator("\xC3"))
            assert.falsy(utf8validator("\xC4"))
            assert.falsy(utf8validator("\xC5"))
            assert.falsy(utf8validator("\xC6"))
            assert.falsy(utf8validator("\xC7"))
            assert.falsy(utf8validator("\xC8"))
            assert.falsy(utf8validator("\xC9"))
            assert.falsy(utf8validator("\xCA"))
            assert.falsy(utf8validator("\xCB"))
            assert.falsy(utf8validator("\xCC"))
            assert.falsy(utf8validator("\xCD"))
            assert.falsy(utf8validator("\xCE"))
            assert.falsy(utf8validator("\xCF"))

            assert.falsy(utf8validator("\xD0"))
            assert.falsy(utf8validator("\xD0"))
            assert.falsy(utf8validator("\xD1"))
            assert.falsy(utf8validator("\xD2"))
            assert.falsy(utf8validator("\xD3"))
            assert.falsy(utf8validator("\xD4"))
            assert.falsy(utf8validator("\xD5"))
            assert.falsy(utf8validator("\xD6"))
            assert.falsy(utf8validator("\xD7"))
            assert.falsy(utf8validator("\xD8"))
            assert.falsy(utf8validator("\xD9"))
            assert.falsy(utf8validator("\xDA"))
            assert.falsy(utf8validator("\xDB"))
            assert.falsy(utf8validator("\xDC"))
            assert.falsy(utf8validator("\xDD"))
            assert.falsy(utf8validator("\xDE"))
            assert.falsy(utf8validator("\xDF"))
        end)

        it("3.2.2 All 16 first bytes of 3-byte sequences", function ()
            assert.falsy(utf8validator("\xE0"))
            assert.falsy(utf8validator("\xE1"))
            assert.falsy(utf8validator("\xE2"))
            assert.falsy(utf8validator("\xE3"))
            assert.falsy(utf8validator("\xE4"))
            assert.falsy(utf8validator("\xE5"))
            assert.falsy(utf8validator("\xE6"))
            assert.falsy(utf8validator("\xE7"))
            assert.falsy(utf8validator("\xE8"))
            assert.falsy(utf8validator("\xE9"))
            assert.falsy(utf8validator("\xEA"))
            assert.falsy(utf8validator("\xEB"))
            assert.falsy(utf8validator("\xEC"))
            assert.falsy(utf8validator("\xED"))
            assert.falsy(utf8validator("\xEE"))
            assert.falsy(utf8validator("\xEF"))
        end)

        it("3.2.3 All 8 first bytes of 4-byte sequences", function ()
            assert.falsy(utf8validator("\xF0"))
            assert.falsy(utf8validator("\xF1"))
            assert.falsy(utf8validator("\xF2"))
            assert.falsy(utf8validator("\xF3"))
            assert.falsy(utf8validator("\xF4"))
            assert.falsy(utf8validator("\xF5"))
            assert.falsy(utf8validator("\xF6"))
            assert.falsy(utf8validator("\xF7"))
        end)

        it("3.2.4 All 8 first bytes of 4-byte sequences", function ()
            assert.falsy(utf8validator("\xF8"))
            assert.falsy(utf8validator("\xF9"))
            assert.falsy(utf8validator("\xFA"))
            assert.falsy(utf8validator("\xFB"))
        end)

        it("3.2.5 All 2 first bytes of 6-byte sequences", function ()
            assert.falsy(utf8validator("\xFC"))
            assert.falsy(utf8validator("\xFD"))
        end)
    end)

    it("3.3 Sequences with last continuation byte missing", function()
        assert.falsy(utf8validator("\xC0"))
        assert.falsy(utf8validator("\xE0\x80"))
        assert.falsy(utf8validator("\xF0\x80\x80"))
        assert.falsy(utf8validator("\xF8\x80\x80\x80"))
        assert.falsy(utf8validator("\xFC\x80\x80\x80\x80"))
        assert.falsy(utf8validator("\xDF"))
        assert.falsy(utf8validator("\xEF\xBF"))
        assert.falsy(utf8validator("\xF7\xBF\xBF"))
        assert.falsy(utf8validator("\xFB\xBF\xBF\xBF"))
        assert.falsy(utf8validator("\xFD\xBF\xBF\xBF\xBF"))
    end)

    it("3.5 Impossible bytes", function()
        assert.falsy(utf8validator("\xFE"))
        assert.falsy(utf8validator("\xFF"))
        assert.falsy(utf8validator("\xFE\xFE\xFF\xFF"))
    end)

    it("4.1 Examples of an overlong ASCII character", function()
        assert.falsy(utf8validator("\xC0\xAF"))
        assert.falsy(utf8validator("\xE0\x80\xAF"))
        assert.falsy(utf8validator("\xF0\x80\x80\xAF"))
        assert.falsy(utf8validator("\xF8\x80\x80\80\xAF"))
        assert.falsy(utf8validator("\xFC\x80\x80\80\80\xAF"))
    end)

    it("4.2 Maximum overlong sequences", function()
        assert.falsy(utf8validator("\xC1\xBF"))
        assert.falsy(utf8validator("\xE0\x9F\xBF"))
        assert.falsy(utf8validator("\xF0\x8F\xBF\xBF"))
        assert.falsy(utf8validator("\xF8\x87\xBF\xBF\xBF"))
        assert.falsy(utf8validator("\xFC\x83\xBF\xBF\xBF\xBF"))
    end)

    it("4.3 Overlong representation of the NUL character", function()
        assert.falsy(utf8validator("\xC0\x80"))
        assert.falsy(utf8validator("\xE0\x80\x80"))
        assert.falsy(utf8validator("\xF0\x80\x80\x80"))
        assert.falsy(utf8validator("\xF8\x80\x80\x80\x80"))
        assert.falsy(utf8validator("\xFC\x80\x80\x80\x80\x80"))
    end)

    it("5.1 Single UTF-16 Surrogates", function()
        assert.falsy(utf8validator("\xED\xA0\x80"))
        assert.falsy(utf8validator("\xED\xAD\xBF"))
        assert.falsy(utf8validator("\xED\xAE\x80"))
        assert.falsy(utf8validator("\xED\xAF\xBF"))
        assert.falsy(utf8validator("\xED\xB0\x80"))
        assert.falsy(utf8validator("\xED\xBE\x80"))
        assert.falsy(utf8validator("\xED\xBF\xBF"))
    end)

    it("5.2 Paired UTF-16 Surrogates", function()
        assert.falsy(utf8validator("\xED\xA0\x80\xED\xB0\x80"))
        assert.falsy(utf8validator("\xED\xA0\x80\xED\xBF\xBF"))
        assert.falsy(utf8validator("\xED\xAD\xBF\xED\xB0\x80"))
        assert.falsy(utf8validator("\xED\xAD\xBF\xED\xBF\xBF"))
        assert.falsy(utf8validator("\xED\xAE\x80\xED\xB0\x80"))
        assert.falsy(utf8validator("\xED\xAE\x80\xED\xBF\xBF"))
        assert.falsy(utf8validator("\xED\xAF\xBF\xED\xB0\x80"))
        assert.falsy(utf8validator("\xED\xAF\xBF\xED\xBF\xBF"))
    end)

end)
